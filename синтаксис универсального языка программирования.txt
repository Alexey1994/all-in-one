import system/Graphics
import graphics/2d/Rectangle

graphics = Graphics(640, 480)
rectangle = Rectangle(0, 0, 100, 100)

#graphics.draw_rectangle(rectangle)
#graphics.draw_rectangle(Rectangle(0, 0, 100, 100))

#Graphics(640, 480).draw_rectangle()

Rectangle(0, 0, 100, 100).draw_rectangle(Graphics(640, 480))


function sort(array)
    i = 0

    loop
        if i < array.length
            j = i

            loop
                if j < array.length
                    if array[i] > array[j]
                        tmp = array[i]
                        array[i] = array[j]
                        array[j] = tmp
                    end
                else
                    break
                end
            end
        else
            break
        end
    end
end

Number
    token 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ()
        write 'push ' token
    end
end

Expression
    infix + (Number a, Number b): Number
        write 'pop BX'
        write 'pop AX'
        write 'add BX'
        write 'push AX'
    end

    infix = (Number a, Number b): Void
        write 'pop AX'
        write 'mov [' a.address '], ' b
    end

    prefix ! (Number a): Number
        write 'pop AX'
        write 'not'
        write 'push AX'
    end

    postfix ++ (Number a): Number
        write 'inc [' a.address ']'
        write 'push ' a
    end
end

Condition
    infix and (Expression a, Expression b)
        write a
        write 'pop ax'
        write 'cmp ax, 0'
        write 'je ' b.size
        write b
        write 'push AX'
    end
end

Body
    prefix if (Condition condition, Body body): If
        write condition
        write 'cmp [sp], 0'
        write 'je ' body.size
        write body
    end

    infix if (Else else, Condition condition, Body body): If
        write condition
        write 'cmp [sp], 0'
        write 'je ' body.size
        write body
    end

    postfix else (): Else
    end

    postfix end (if: If): Body
    end

    token break ()
    end

    token continue ()
    end
end

##########################################################################

Number     = [0-9]*
Expression = Number + Number | Number + Expression | Expression + Number |
             Number - Number | Number - Expression | Expression - Number